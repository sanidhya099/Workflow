@page "/ForgetPassword/{UserType}"
@using TinaKingWebApp.Authentication
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<body class="d-flex align-items-center justify-content-center h-100" style="background-color:#0a253b">

    <div class="container full-height">

        <div class="row bg-light overflow-hidden rounded-lg shadow-lg" style="min-width:880px;">

            <div class="col-md-6 d-flex align-items-center justify-content-center" style="background-color:#6c757d">
                <img src="/FinalLogo.png" class="img-fluid" />
            </div>

            <div class="col-md-6 p-4" style="background-color:F5F5F5">
                <EditForm Model="@_view">
                    <DataAnnotationsValidator />
                    <div>
                        <h2 class="text-center mb-3">Forgot Password</h2>
                        <hr />
                        <div class="d-flex justify-content-around mb-4">
                        </div>
                    </div>
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <input @bind="Email" id="Email" class="form-control" autocomplete="Email" aria-required="true" placeholder="name@example.com" />
                        <label for="Email" class="form-label">Email Address</label>
                    </div>
                    <div class="form-floating mb-3">
                        <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Secondary" class="w-100" OnClick="HandleSubmit">Reset Password</MudButton>
                    </div>
                    <div class="form-floating mb-3">
                        <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" class="w-100" OnClick="GotoLogin">Back to Login</MudButton>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

</body>

@code {
    private int clientID;
    private string userName = "Guest";

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var firstNameClaim = user.FindFirst(c => c.Type == "Name")?.Value;
            if (!string.IsNullOrEmpty(firstNameClaim))
            {
                userName = firstNameClaim;
            }

            var clientIDClaim = user.FindFirst(c => c.Type == "ClientID")?.Value;
            if (!string.IsNullOrEmpty(clientIDClaim))
            {
                clientID = int.Parse(clientIDClaim);
            }
        }
    }
}
