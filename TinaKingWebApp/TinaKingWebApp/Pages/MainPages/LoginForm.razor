@page "/"
@using TinaKingWebApp.Authentication
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<body class="d-flex align-items-center justify-content-center h-100" style="background-color:#0a253b">
    <div class="container full-height">
        <div class="row bg-light overflow-hidden rounded-lg shadow-lg" style="min-width:880px;">
            <div class="col-md-6 d-flex align-items-center justify-content-center" style="background-color:#6c757d">
                <img src="/FinalLogo.png" class="img-fluid" />
            </div>

            <div class="col-md-6 p-4" style="background-color:F5F5F5">
                <EditForm Model="@SelectedModel">
                    <DataAnnotationsValidator />
                    <div>
                        <h2 class="text-center mb-3">Log In</h2>
                        <hr />
                        <div class="d-flex justify-content-around mb-4">
                            @if (isClientLogin == true)
                            {
                                <div class="text-center">
                                    <button @onclick="SelectClientLogin" class="btn p-0">
                                        <img src="./images/Client-final.png" alt="Client" class="img-fluid" style="width: 150px; height: 150px;" />
                                    </button>
                                    <p>Client</p>
                                </div>
                            }
                            else if (isClientLogin == false)
                            {
                                <div class="text-center">
                                    <button @onclick="SelectEmployeeLogin" class="btn p-0">
                                        <img src="./images/Employee-final.png" alt="Employee" class="img-fluid" style="width: 150px; height: 150px;" />
                                    </button>
                                    <p>Employee</p>
                                </div>
                            }
                            else
                            {
                                <div class="text-center">
                                    <button @onclick="SelectClientLogin" class="btn p-0">
                                        <img src="./images/Client-final.png" alt="Client" class="img-fluid" style="width: 150px; height: 150px" />
                                    </button>
                                    <p>Client</p>
                                </div>
                                <div class="text-center">
                                    <button @onclick="SelectEmployeeLogin" class="btn p-0">
                                        <img src="./images/Employee-final.png" alt="Employee" class="img-fluid" style="width: 150px; height: 150px;" />
                                    </button>
                                    <p>Employee</p>
                                </div>
                            }
                        </div>
                    </div>
                    <ValidationSummary class="text-danger" role="alert" />
                    @if (isClientLogin.HasValue)
                    {
                        <div class="form-floating mb-3">
                            <input @bind="UserName" @bind:event="oninput" id="UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" @onkeydown="HandleKeyDown" />
                            <label for="UserName" class="form-label">User Name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input @bind="Password" @bind:event="oninput" type="password" id="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" @onkeydown="HandleKeyDown" />
                            <label for="password" class="form-label">Password</label>
                        </div>
                        <div class="form-floating mb-3">
                            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" class="w-100" OnClick="HandleLogin">Log In</MudButton>
                        </div>
                        <div>
                            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Warning" class="w-100" OnClick="HandleForget">Forgot Password</MudButton>
                        </div>
                    }
                    else
                    {
                        <div class="form-floating mb-3">
                            <input id="UserName" class="form-control" disabled />
                            <label for="UserName" class="form-label">UserName</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input type="password" id="password" class="form-control" disabled />
                            <label for="password" class="form-label">Password</label>
                        </div>
                        <div>
                            <MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Primary" class="w-100" Disabled>Log In</MudButton>
                     </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</body>

@code {
    private int clientID;
    private string userName = "Guest";

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Key == "Enter")
        {
            await HandleLogin();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var firstNameClaim = user.FindFirst(c => c.Type == "Name")?.Value;
            if (!string.IsNullOrEmpty(firstNameClaim))
            {
                userName = firstNameClaim;
            }

            var clientIDClaim = user.FindFirst(c => c.Type == "ClientID")?.Value;
            if (!string.IsNullOrEmpty(clientIDClaim))
            {
                clientID = int.Parse(clientIDClaim);
            }
        }
    }
}
